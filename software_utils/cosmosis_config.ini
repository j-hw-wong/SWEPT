[runtime]
; The test sampler just runs a single parameter set.
sampler = test

[test]
save_dir=${COSMOSIS_OUT_DIR}
fatal_errors=T
analyze_fast_slow = F

[pipeline]
; The list of modules to be run, in this order.  The modules named here must
; appear as sections below.
modules = consistency camb halofit extrapolate_power constant_bias load_nz  project_2d
values = $COSMOSIS_VARIABLES_PATH
likelihoods =
extra_output =
; We can get a little more output during the run by setting some values.
quiet=F
timing=T
debug=T

[consistency]
file = cosmosis-standard-library/utility/consistency/consistency_interface.py

[camb]
file = cosmosis-standard-library/boltzmann/camb/camb.so
mode=all
feedback=1
kmax=1.0


[halofit]
file = cosmosis-standard-library/boltzmann/halofit_takahashi/halofit_interface.so
kmax=10.0

[extrapolate_power]
file=cosmosis-standard-library/boltzmann/extrapolate/extrapolate_power.py
kmax=1.0

[constant_bias]
file = cosmosis-standard-library/bias/constant_bias/constant_bias.py

[load_nz]
file = cosmosis-standard-library/number_density/load_nz/load_nz.py
filepath=$NZ_TABLE_PATH

; This module uses the Limber approximation to compute shear-shear C_ell given
; the shear kernel (which is derived from the number density and from geometry).
[project_2d]
file = cosmosis-standard-library/structure/projection/project_2d_mod.py
ell_min = ${ELL_MIN}
ell_max = ${ELL_MAX}
n_ell = ${COSMOSIS_N_ELL}
save_kernels = True

shear-shear = T
position-position = T
position-shear = T

linspaced = T
