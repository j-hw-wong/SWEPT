"""
Script to create an n(z) distribution from the raw galaxy sample generated by 'init_rand_sample.py' and svae to disk.
The n(z) distribution is split into a large number of redshift bins N_ZBIN read in from the 'set_variables_cat.ini'
parameter file and used to calculate the 3x2pt data vector and field values using CosmoSIS and Flask respectively.
"""

import os
import h5py
import statistics
import configparser
import numpy as np
import matplotlib.pyplot as plt
from collections import defaultdict


def nz_config(pipeline_variables_path):

    """
    Set up a config dictionary to generate an n(z) distribution from a given input file.

    Parameters
    ----------
    pipeline_variables_path (str):  Path to location of 'set_variables_cat.ini' file

    Returns
    -------
    Dictionary of n(z) parameters
    """

    config = configparser.ConfigParser()
    config.read(pipeline_variables_path)

    zmin = float(config['redshift_distribution']['ZMIN'])
    zmax = float(config['redshift_distribution']['ZMAX'])

    # Precision/step-size of z-range that is sampled over.
    dz = float(config['redshift_distribution']['DZ'])

    nbins = int(float(config['create_nz']['N_ZBIN']))

    nz_table_filename = str(config['create_nz']['NZ_TABLE_NAME'])

    save_dir = str(config['simulation_setup']['SIMULATION_SAVE_DIR'])

    # Prepare config dictionary
    config_dict = {
        'zmin': zmin,
        'zmax': zmax,
        'dz': dz,
        'nbins': nbins,
        'nz_table_filename': nz_table_filename,
        'save_dir': save_dir
    }

    return config_dict


def create_zbin_boundaries(config_dict):

    """
    Create a table of the redshift boundaries used for binning the raw galaxy sample for the theoretical power spectra
    + fields, which is then saved to disk.

    Parameters
    ----------
    config_dict (dict): Dictionary of pipeline and redshift distribution parameters used to generate the bin boundaries
                        and overall n(z)

    Returns
    -------
    Array of the redshift bin boundaries
    """

    zmin = config_dict['zmin']
    zmax = config_dict['zmax']
    dz = config_dict['dz']
    nbins = config_dict['nbins']
    save_dir = config_dict['save_dir']

    if not os.path.exists(save_dir):
        os.makedirs(save_dir)

    z_boundaries_filename = 'z_boundaries.txt'

    z_boundaries_low = np.linspace(zmin, zmax, nbins+1)
    z_boundaries_mid = z_boundaries_low + (((zmax-zmin)/nbins)/2)
    z_boundaries_high = z_boundaries_mid + (((zmax-zmin)/nbins)/2)

    z_boundaries = [z_boundaries_low, z_boundaries_mid, z_boundaries_high]
    np.savetxt(save_dir+z_boundaries_filename,
               np.transpose(z_boundaries),
               fmt=['%.2f', '%.2f', '%.2f'])

    return np.asarray(z_boundaries)


def create_nz(config_dict, z_boundaries):

    """
    Create nz for the map generation - read in the z-bin boundaries from create_zbin_boundaries and save an n(z) table
    to disk for input into CosmoSIS

    Parameters
    ----------
    config_dict (dict): Dictionary of pipeline/redshift distribution setup parameters used for the generation of the
                        n(z)
    z_boundaries (arr): Array of the redshift bin boundaries used to split the galaxy sample

    """

    zmin = config_dict['zmin']
    zmax = config_dict['zmax']
    dz = config_dict['dz']
    nbins = config_dict['nbins']
    nz_table_filename = config_dict['nz_table_filename']
    save_dir = config_dict['save_dir']

    if not os.path.exists(save_dir):
        os.makedirs(save_dir)

    z_boundaries_low = z_boundaries[0][0:-1]
    z_boundaries_mid = z_boundaries[1][0:-1]
    z_boundaries_high = z_boundaries[2][0:-1]

    z_boundaries_low = np.round(z_boundaries_low, 2)
    z_boundaries_mid = np.round(z_boundaries_mid, 2)
    z_boundaries_high = np.round(z_boundaries_high, 2)

    # print("J.Wong very smart")

    #sub_hist_bins = np.arange(zmin, zmax+dz+dz, dz)
    sub_hist_bins = np.linspace(zmin, zmax+dz, nbins+2)
    sub_hist_bins = sub_hist_bins.round(decimals=2)
    gal_dic_binned = defaultdict(list)
    gal_dic_binned_hist = defaultdict(list)

    zs_medians = []

    mock_cat_filename = 'Raw_Galaxy_Sample.hdf5'
    mock_cat = save_dir + mock_cat_filename

    with h5py.File(mock_cat, "r") as f:
        rnd_sample = f['Redshift_z'][()]

    #rnd_sample = np.round(rnd_sample, 1)
    rnd_sample = np.round(rnd_sample, 2)

    for i in range(nbins):

        gal_dic_binned["BIN_{}".format(i+1)] = []
        ids = np.where((rnd_sample >= z_boundaries_low[i]) & (rnd_sample < z_boundaries_high[i]))[0]
        zs_sub = rnd_sample[ids]
        gal_dic_binned["BIN_{}".format(i + 1)] = zs_sub
        binned_hist = np.histogram(gal_dic_binned["BIN_{}".format(i+1)], bins=sub_hist_bins)
        gal_dic_binned_hist["BIN_{}".format(i + 1)] = []
        gal_dic_binned_hist["BIN_{}".format(i + 1)].append(binned_hist)

        if len(zs_sub) == 0:
            zs_medians.append(0)
        else:
            zs_medians.append(statistics.median(gal_dic_binned["BIN_{}".format(i+1)]))

    z_boundaries_low_binned = gal_dic_binned_hist["BIN_1"][0][1][0:-1]
    z_boundaries_mid_binned = z_boundaries_low_binned + (dz/2)
    z_boundaries_high_binned = z_boundaries_low_binned + dz

    np.savetxt(
        save_dir + 'zs_medians.txt',
        np.transpose(zs_medians))

    final_cat_tab = []
    final_cat_tab.append(z_boundaries_low_binned)

    for i in range(nbins):
        final_cat_tab.append(gal_dic_binned_hist["BIN_{}".format(i + 1)][0][0])
    '''
    final_cat_tab = np.transpose(final_cat_tab)
    zmax_pad = np.concatenate((np.array([zmax+dz]), np.zeros(nbins)))
    final_cat_tab = np.vstack((final_cat_tab, zmax_pad))
    final_cat_tab = np.transpose(final_cat_tab)
    '''
    if zmin != 0:
        final_cat_tab = np.transpose(final_cat_tab)
        pad_vals = int((zmin-0)/dz)
        for i in range(pad_vals):
            z_pad = np.array([zmin-((i+1)*dz)])
            pad_arr = np.concatenate((z_pad, np.zeros(nbins)))
            final_cat_tab = np.vstack((pad_arr, final_cat_tab))

        final_cat_tab = np.transpose(final_cat_tab)

    np.savetxt(
        save_dir + nz_table_filename,
        np.transpose(final_cat_tab))


def main():

    """
    Generate the n(z) table by reading in the pipeline variables file as environment variable, then setting up the
    config dictionary and creating the n(z) to save to disk.
    """

    pipeline_variables_path = os.environ['PIPELINE_VARIABLES_PATH']
    nz_config_dict = nz_config(pipeline_variables_path=pipeline_variables_path)
    z_boundaries = create_zbin_boundaries(config_dict=nz_config_dict)
    create_nz(config_dict=nz_config_dict, z_boundaries=z_boundaries)


if __name__ == '__main__':
    main()
